version: '3.8'

services:
  postgres:
    image: postgres:18.0-bookworm
    container_name: pressograph-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: pressograph
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pressograph_dev_password}
      POSTGRES_DB: pressograph
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/migrations:/docker-entrypoint-initdb.d:ro
      - ./postgres.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pressograph"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pressograph-internal

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: pressograph-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://pressograph:${POSTGRES_PASSWORD:-pressograph_dev_password}@postgres:5432/pressograph
      JWT_SECRET: ${JWT_SECRET:-change_me_in_production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change_me_in_production_too}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-https://pressograph.infra4.dev}
      BASE_URL: ${API_BASE_URL:-https://api.pressograph.infra4.dev}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10mb}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - pressograph-internal
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"

      # HTTP to HTTPS redirect
      - "traefik.http.routers.pressograph-api-http.entrypoints=http"
      - "traefik.http.routers.pressograph-api-http.rule=Host(`api.pressograph.infra4.dev`)"
      - "traefik.http.routers.pressograph-api-http.middlewares=https-redirect@file"

      # HTTPS router
      - "traefik.http.routers.pressograph-api.entrypoints=https"
      - "traefik.http.routers.pressograph-api.rule=Host(`api.pressograph.infra4.dev`)"
      - "traefik.http.routers.pressograph-api.tls=true"
      - "traefik.http.routers.pressograph-api.tls.certresolver=cloudflare"
      - "traefik.http.routers.pressograph-api.tls.options=strict@file"

      # Service
      - "traefik.http.services.pressograph-api.loadbalancer.server.port=3001"

      # CORS headers for API
      - "traefik.http.middlewares.pressograph-api-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.pressograph-api-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.pressograph-api-cors.headers.accesscontrolalloworiginlist=https://pressograph.infra4.dev"
      - "traefik.http.middlewares.pressograph-api-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.pressograph-api-cors.headers.addvaryheader=true"
      - "traefik.http.routers.pressograph-api.middlewares=pressograph-api-cors"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: pressograph-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      VITE_API_URL: https://api.pressograph.infra4.dev
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"

      # HTTP to HTTPS redirect
      - "traefik.http.routers.pressograph-http.entrypoints=http"
      - "traefik.http.routers.pressograph-http.rule=Host(`pressograph.infra4.dev`)"
      - "traefik.http.routers.pressograph-http.middlewares=https-redirect@file"

      # HTTPS router
      - "traefik.http.routers.pressograph.entrypoints=https"
      - "traefik.http.routers.pressograph.rule=Host(`pressograph.infra4.dev`)"
      - "traefik.http.routers.pressograph.tls=true"
      - "traefik.http.routers.pressograph.tls.certresolver=cloudflare"
      - "traefik.http.routers.pressograph.tls.options=strict@file"

      # Service
      - "traefik.http.services.pressograph.loadbalancer.server.port=80"

      # Security headers
      - "traefik.http.middlewares.pressograph-headers.headers.browserxssfilter=true"
      - "traefik.http.middlewares.pressograph-headers.headers.contenttypenosniff=true"
      - "traefik.http.middlewares.pressograph-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.pressograph-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.pressograph-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.pressograph-headers.headers.stsSeconds=31536000"
      - "traefik.http.routers.pressograph.middlewares=pressograph-headers"

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  pressograph-internal:
    driver: bridge
  traefik-public:
    external: true
    name: traefik-public
