# ═══════════════════════════════════════════════════════════════════
# Pressograph Frontend Containerfile - Multi-stage Build
# ═══════════════════════════════════════════════════════════════════
# Build optimized React SPA with Vite and serve with Nginx
# Follows OCI image spec and Buildah best practices 2025
#
# Build command:
#   buildah bud -f deploy/Containerfile \
#     --tag localhost/pressograph-frontend:latest \
#     --build-arg VERSION=1.2.0 \
#     --build-arg VITE_API_URL=/api \
#     --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
#     .
# ═══════════════════════════════════════════════════════════════════

# Build arguments (can be overridden at build time)
ARG NODE_VERSION=lts-trixie
ARG NGINX_VERSION=1.29-trixie-perl
ARG VERSION=1.2.0
ARG BUILD_DATE
ARG VCS_REF
ARG VITE_API_URL=/api
ARG NODE_ENV=production

# ═══════════════════════════════════════════════════════════════════
# Stage 1: Builder - Build React Application with Vite
# ═══════════════════════════════════════════════════════════════════
FROM node:${NODE_VERSION} AS builder

WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./

# Install dependencies (--prefer-offline for speed, --no-audit for CI)
RUN npm install --prefer-offline --no-audit

# Copy source code
COPY . .

# Build application with Vite
# VITE_API_URL is injected at build time for API endpoint configuration
ARG VITE_API_URL
ENV VITE_API_URL=${VITE_API_URL}

RUN npm run build

# ═══════════════════════════════════════════════════════════════════
# Stage 2: Production - Nginx Server with Static Assets
# ═══════════════════════════════════════════════════════════════════
FROM docker.io/nginx:${NGINX_VERSION}

# Re-declare ARGs for this stage
ARG VERSION=1.2.0
ARG BUILD_DATE
ARG VCS_REF

# Copy built assets from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY deploy/nginx.conf /etc/nginx/conf.d/default.conf

# Install curl for healthcheck (minimal layer size)
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl && \
    rm -rf /var/lib/apt/lists/*

# Create health endpoint file
RUN echo '{"status":"healthy","service":"pressograph-frontend"}' > /usr/share/nginx/html/health

# Expose HTTP port
EXPOSE 80

# OCI Image Labels
# https://github.com/opencontainers/image-spec/blob/main/annotations.md
LABEL org.opencontainers.image.title="Pressograph Frontend" \
      org.opencontainers.image.description="React SPA for pressure test visualization served by Nginx" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.vendor="Pressograph" \
      org.opencontainers.image.authors="Pressograph Team" \
      org.opencontainers.image.url="https://pressograph.infra4.dev" \
      org.opencontainers.image.source="https://github.com/your-org/pressograph" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.base.name="docker.io/nginx:1.29-trixie-perl" \
      com.pressograph.component="frontend" \
      com.pressograph.service="web" \
      com.pressograph.environment="production"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:80/health || exit 1

# Start nginx in foreground
CMD ["nginx", "-g", "daemon off;"]
