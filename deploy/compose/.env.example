# ═══════════════════════════════════════════════════════════════════
# Pressograph Environment Variables Template
# ═══════════════════════════════════════════════════════════════════
# Копируйте этот файл в .env.dev или .env.prod и заполните значения
#
# Для development:
#   cp .env.example .env.dev
#   # Используйте слабые пароли (допустимо для dev)
#
# Для production:
#   cp .env.example .env.prod
#   # Генерируйте СИЛЬНЫЕ пароли и секреты!
#   # openssl rand -hex 32
# ═══════════════════════════════════════════════════════════════════

# ═══════════════════════════════════════════════════════════════════
# PostgreSQL Configuration
# ═══════════════════════════════════════════════════════════════════
POSTGRES_DB=pressograph
POSTGRES_USER=pressograph

# 🔒 SECURITY: Генерируйте сильный пароль!
# Для production: openssl rand -base64 32
# Минимум 32 символа, mixed case, numbers, symbols
POSTGRES_PASSWORD=<GENERATE_STRONG_PASSWORD>

# ═══════════════════════════════════════════════════════════════════
# Database Connection URL
# ═══════════════════════════════════════════════════════════════════
# Format: postgresql://user:password@host:port/database
# Подставьте значения из переменных выше
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}

# ═══════════════════════════════════════════════════════════════════
# Node.js Backend Configuration
# ═══════════════════════════════════════════════════════════════════
NODE_ENV=production
PORT=3001
HOST=0.0.0.0

# ═══════════════════════════════════════════════════════════════════
# Logging Configuration
# ═══════════════════════════════════════════════════════════════════
# Development: LOG_LEVEL=debug, DEBUG=pressograph:*
# Production: LOG_LEVEL=info, DEBUG=
LOG_LEVEL=info
DEBUG=

# ═══════════════════════════════════════════════════════════════════
# JWT Authentication Secrets
# ═══════════════════════════════════════════════════════════════════
# 🔒 CRITICAL SECURITY: Генерируйте уникальные секреты!
#
# Как сгенерировать:
#   openssl rand -hex 32
#
# Требования:
#   - Минимум 64 символа (hex)
#   - Разные секреты для JWT_SECRET и JWT_REFRESH_SECRET
#   - Уникальные для каждого окружения (dev, staging, prod)
#   - Храните секретно, НЕ коммитьте в git
#   - Ротируйте каждые 90 дней
# ═══════════════════════════════════════════════════════════════════

JWT_SECRET=<GENERATE_WITH_OPENSSL_RAND_HEX_32>
JWT_REFRESH_SECRET=<GENERATE_WITH_OPENSSL_RAND_HEX_32_DIFFERENT>

# Token expiration times
# Development: 15m / 7d (удобно для тестирования)
# Production: 5m / 24h (более безопасно)
JWT_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d

# ═══════════════════════════════════════════════════════════════════
# CORS & URLs Configuration
# ═══════════════════════════════════════════════════════════════════
# Development: множество origins (localhost, dev domain)
# Production: ТОЛЬКО production domain
ALLOWED_ORIGINS=https://pressograph.infra4.dev

# Base URL для генерации ссылок
BASE_URL=https://pressograph.infra4.dev

# ═══════════════════════════════════════════════════════════════════
# Upload Configuration
# ═══════════════════════════════════════════════════════════════════
# Maximum file size для загрузки файлов
# Примеры: 10mb, 50mb, 100mb
MAX_FILE_SIZE=10mb

# ═══════════════════════════════════════════════════════════════════
# Frontend Build Configuration
# ═══════════════════════════════════════════════════════════════════
# API URL для frontend (обычно /api для проксирования через Traefik)
VITE_API_URL=/api

# ═══════════════════════════════════════════════════════════════════
# OCI Image Labels (для versioning и metadata)
# ═══════════════════════════════════════════════════════════════════
# Semantic versioning: MAJOR.MINOR.PATCH
# Development: 1.0.0-dev
# Production: 1.0.0, 1.1.0, 2.0.0, etc.
VERSION=1.0.0

# Build date (ISO 8601 format)
# Auto-generate: date -u +"%Y-%m-%dT%H:%M:%SZ"
BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

# ═══════════════════════════════════════════════════════════════════
# ПРИМЕРЫ КОНФИГУРАЦИЙ
# ═══════════════════════════════════════════════════════════════════

# ┌─────────────────────────────────────────────────────────────────┐
# │ DEVELOPMENT EXAMPLE                                              │
# └─────────────────────────────────────────────────────────────────┘
# POSTGRES_PASSWORD=devpassword123
# DATABASE_URL=postgresql://pressograph_dev:devpassword123@postgres:5432/pressograph_dev
# JWT_SECRET=dev_jwt_secret_not_for_production
# JWT_REFRESH_SECRET=dev_refresh_secret_not_for_production
# ALLOWED_ORIGINS=https://dev-pressograph.infra4.dev,http://localhost:5173
# LOG_LEVEL=debug
# DEBUG=pressograph:*
# VERSION=1.0.0-dev

# ┌─────────────────────────────────────────────────────────────────┐
# │ PRODUCTION EXAMPLE                                               │
# └─────────────────────────────────────────────────────────────────┘
# POSTGRES_PASSWORD=PrGr@ph_S3cur3_P@ssw0rd_2025_Xy!zAbC123
# DATABASE_URL=postgresql://pressograph:PrGr@ph_S3cur3_P@ssw0rd_2025_Xy!zAbC123@postgres:5432/pressograph
# JWT_SECRET=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0
# JWT_REFRESH_SECRET=z9y8x7w6v5u4t3s2r1q0p9o8n7m6l5k4j3i2h1g0f9e8d7c6b5a4z3y2x1w0
# ALLOWED_ORIGINS=https://pressograph.infra4.dev
# LOG_LEVEL=info
# DEBUG=
# VERSION=1.0.0

# ═══════════════════════════════════════════════════════════════════
# SECURITY CHECKLIST
# ═══════════════════════════════════════════════════════════════════
#
# □ POSTGRES_PASSWORD - сильный, уникальный, 32+ символов
# □ JWT_SECRET - сгенерирован openssl rand -hex 32
# □ JWT_REFRESH_SECRET - сгенерирован openssl rand -hex 32 (ДРУГОЙ!)
# □ .env.prod добавлен в .gitignore
# □ Секреты НЕ коммитятся в git
# □ Разные секреты для dev/staging/prod
# □ Секреты хранятся в secure location (password manager)
# □ План ротации секретов (каждые 90 дней)
# □ ALLOWED_ORIGINS ограничен в production
# □ LOG_LEVEL=info в production (не debug!)
#
# ═══════════════════════════════════════════════════════════════════
# PASSWORD GENERATION COMMANDS
# ═══════════════════════════════════════════════════════════════════
#
# PostgreSQL password (32 chars, base64):
#   openssl rand -base64 32
#
# JWT secrets (64 chars, hex):
#   openssl rand -hex 32
#
# Strong password (alphanumeric + symbols):
#   openssl rand -base64 48 | tr -d "=+/" | cut -c1-32
#
# Multiple secrets at once:
#   echo "POSTGRES_PASSWORD=$(openssl rand -base64 32)"
#   echo "JWT_SECRET=$(openssl rand -hex 32)"
#   echo "JWT_REFRESH_SECRET=$(openssl rand -hex 32)"
#
# ═══════════════════════════════════════════════════════════════════
# Observability Stack Configuration (Optional)
# ═══════════════════════════════════════════════════════════════════
# Переменные для observability stack (метрики, логи, трейсы)
# Подробности в deploy/compose/.env.observability
#
# Если вы НЕ используете observability stack, можете пропустить эту секцию
# ═══════════════════════════════════════════════════════════════════

# ─────────────────────────────────────────────────────────────────
# Grafana Configuration
# ─────────────────────────────────────────────────────────────────
# Admin credentials для Grafana
# Development: слабые пароли допустимы
# Production: ОБЯЗАТЕЛЬНО генерируйте сильный пароль!
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=<GENERATE_STRONG_PASSWORD>

# Domain для Grafana UI
# Development: grafana-dev.infra4.dev
# Production: grafana.infra4.dev
GRAFANA_DOMAIN=grafana.infra4.dev

# Secret key для signing cookies/sessions
# 🔒 CRITICAL: Генерируйте уникальный секрет!
# openssl rand -hex 32
GRAFANA_SECRET_KEY=<GENERATE_WITH_OPENSSL_RAND_HEX_32>

# ─────────────────────────────────────────────────────────────────
# VictoriaMetrics Configuration
# ─────────────────────────────────────────────────────────────────
# Retention period для метрик (примеры: 30d, 90d, 1y)
# Development: 30d
# Production: 90d или больше
VM_RETENTION_PERIOD=90d

# Domain для VictoriaMetrics UI
VM_DOMAIN=victoria.infra4.dev

# ─────────────────────────────────────────────────────────────────
# VictoriaLogs Configuration
# ─────────────────────────────────────────────────────────────────
# Retention period для логов (примеры: 14d, 30d, 90d)
# Development: 14d
# Production: 30d
VLOGS_RETENTION_PERIOD=30d

# Domain для VictoriaLogs UI
VLOGS_DOMAIN=logs.infra4.dev

# ─────────────────────────────────────────────────────────────────
# Tempo (Tracing) Configuration
# ─────────────────────────────────────────────────────────────────
# Retention period для трейсов (примеры: 7d, 14d)
# Рекомендуется: 7-14d (трейсы занимают много места)
TEMPO_RETENTION_PERIOD=7d

# ─────────────────────────────────────────────────────────────────
# PostgreSQL Exporter Configuration
# ─────────────────────────────────────────────────────────────────
# Data Source Name для подключения к PostgreSQL
# Format: postgresql://user:password@host:port/database?sslmode=disable
#
# ВАЖНО: Используйте те же credentials что и для POSTGRES_USER/POSTGRES_PASSWORD
# Host: pressograph-prod-postgres (или pressograph-dev-postgres для dev)
POSTGRES_EXPORTER_DSN=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable

# ═══════════════════════════════════════════════════════════════════
# OBSERVABILITY STACK USAGE
# ═══════════════════════════════════════════════════════════════════
#
# Запуск observability stack:
#
#   # Full stack (метрики + логи + трейсы)
#   podman-compose -f compose.observability.yaml --env-file .env.observability --profile full up -d
#
#   # Только мониторинг (метрики)
#   podman-compose -f compose.observability.yaml --env-file .env.observability --profile monitoring up -d
#
#   # Только логи
#   podman-compose -f compose.observability.yaml --env-file .env.observability --profile logging up -d
#
# Доступ к UI:
#   - Grafana: https://grafana.infra4.dev
#   - VictoriaMetrics: https://victoria.infra4.dev
#   - VictoriaLogs: https://logs.infra4.dev
#
# Подробная документация:
#   См. deploy/grafana/README.md
#
# ═══════════════════════════════════════════════════════════════════

# ═══════════════════════════════════════════════════════════════════
# TROUBLESHOOTING
# ═══════════════════════════════════════════════════════════════════
#
# Q: Как проверить что переменные загружены?
# A: podman-compose -f compose.prod.yaml config
#
# Q: Почему не загружаются переменные?
# A: Проверьте что используете --env-file:
#    podman-compose -f compose.prod.yaml --env-file .env.prod up -d
#
# Q: Как проверить переменные в контейнере?
# A: podman exec pressograph-backend env | grep -E "(POSTGRES|JWT)"
#
# Q: Где хранить .env.prod безопасно?
# A: - Password manager (1Password, Bitwarden)
#    - Encrypted storage (GPG, ansible-vault)
#    - Secrets management (Vault, AWS Secrets Manager)
#    - НЕ в git репозитории!
#
# ═══════════════════════════════════════════════════════════════════
