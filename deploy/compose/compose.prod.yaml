# ═══════════════════════════════════════════════════════════════════
# Pressograph Production Environment
# Compose Specification 2025 (Production-Ready, Hardened)
# ═══════════════════════════════════════════════════════════════════
# Domain: https://pressograph.infra4.dev
# Backend API: https://pressograph.infra4.dev/api
#
# Features:
# - Production-optimized builds (multi-stage Dockerfiles)
# - Resource limits для предотвращения OOM
# - Enhanced security (read-only FS, no-new-privileges, minimal capabilities)
# - Log rotation (10MB max, 5 files для production)
# - Healthchecks с proper start_period
# - OCI labels для inventory management
# - Secrets management через .env.prod
# - Traefik integration с HTTPS и security headers
#
# Usage:
#   cd /opt/projects/repositories/pressure-test-visualizer
#   make prod-compose
#   # или напрямую:
#   podman-compose -f deploy/compose/compose.prod.yaml --env-file deploy/compose/.env.prod up -d
#   podman-compose -f deploy/compose/compose.prod.yaml logs -f
#
# Deployment:
#   1. Build images: make build-images
#   2. Start: podman-compose -f deploy/compose/compose.prod.yaml --env-file deploy/compose/.env.prod up -d
#   3. Check: curl https://pressograph.infra4.dev/api/health
#
# Best Practices 2025:
#   ✅ Без version field (устарел)
#   ✅ Resource limits + reservations
#   ✅ Enhanced logging с rotation (5 файлов для prod)
#   ✅ Security hardening (read-only FS, cap drop, non-root)
#   ✅ OCI standard labels
#   ✅ Healthchecks с start_period
#   ✅ Secrets из .env.prod (не хардкод)
#   ✅ YAML anchors для DRY
# ═══════════════════════════════════════════════════════════════════

# ═══════════════════════════════════════════════════════════════════
# YAML Anchors - переиспользуемые конфигурации
# ═══════════════════════════════════════════════════════════════════

# Общие OCI labels
x-common-labels: &common-labels
  org.opencontainers.image.vendor: "Pressograph"
  org.opencontainers.image.source: "https://github.com/your-org/pressure-test-visualizer"
  org.opencontainers.image.version: "${VERSION:-1.0.0}"
  org.opencontainers.image.created: "${BUILD_DATE:-2025-10-29}"
  org.opencontainers.image.authors: "Pressograph Team"
  org.opencontainers.image.licenses: "MIT"
  com.pressograph.environment: "production"

# Production logging (больше файлов для анализа проблем)
x-common-logging: &common-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "5"
    labels: "service,env,project,version"
    tag: "{{.Name}}/{{.ID}}"
    compress: "true"

# Enhanced security для production
x-common-security: &common-security
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL

# Healthcheck defaults
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 5s
  retries: 3

# ═══════════════════════════════════════════════════════════════════
# Services
# ═══════════════════════════════════════════════════════════════════

services:
  # ═══════════════════════════════════════════════════════════════════
  # PostgreSQL Database (Production)
  # ═══════════════════════════════════════════════════════════════════
  postgres:
    image: docker.io/library/postgres:18-trixie
    container_name: pressograph-db
    restart: unless-stopped

    # Security context
    user: "999:999"
    <<: *common-security
    cap_add:
      - CHOWN
      - FOWNER
      - DAC_OVERRIDE

    # Resource limits (Production: больше памяти для кеша)
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

    # Logging
    logging: *common-logging

    # Shared memory для PostgreSQL (performance)
    shm_size: 256m

    # Environment variables (из .env.prod)
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-pressograph}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-pressograph}
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"

    # Volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data:z

    # Networking (только internal - НЕ подключен к traefik-public)
    networks:
      - pressograph-internal

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pressograph}"]
      <<: *healthcheck-defaults
      interval: 10s
      start_period: 30s

    # OCI Labels
    labels:
      <<: *common-labels
      org.opencontainers.image.title: "Pressograph PostgreSQL Database"
      org.opencontainers.image.description: "PostgreSQL 18 production database"
      com.pressograph.service: "database"
      com.pressograph.backup.schedule: "daily"
      com.pressograph.backup.retention: "30d"

  # ═══════════════════════════════════════════════════════════════════
  # Backend API (Node.js/Express Production Build)
  # ═══════════════════════════════════════════════════════════════════
  backend:
    build:
      context: ../../server
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
        BUILD_DATE: ${BUILD_DATE:-2025-10-29}
        VERSION: ${VERSION:-1.0.0}
    image: pressograph-backend:${VERSION:-latest}
    container_name: pressograph-backend
    restart: unless-stopped

    # Security context
    user: "node:node"
    <<: *common-security
    cap_add:
      - NET_BIND_SERVICE

    # Resource limits (Production: более щедрые лимиты)
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

    # Logging
    logging: *common-logging

    # Dependencies
    depends_on:
      postgres:
        condition: service_healthy
        restart: true

    # Environment variables (из .env.prod)
    env_file:
      - .env.prod

    environment:
      NODE_ENV: production
      PORT: ${PORT:-3001}
      HOST: 0.0.0.0

    # Volumes (persistent data)
    volumes:
      - backend_uploads:/app/uploads:z
      - backend_logs:/app/logs:z

    # Networking
    networks:
      - pressograph-internal
      - traefik-public

    # Traefik Labels
    labels:
      # OCI Labels
      <<: *common-labels
      org.opencontainers.image.title: "Pressograph Backend API"
      org.opencontainers.image.description: "Node.js Express REST API"
      com.pressograph.service: "backend"

      # Traefik routing
      traefik.enable: "true"
      traefik.docker.network: "traefik-public"

      # Backend API Router
      traefik.http.routers.pressograph-api.entrypoints: "https"
      traefik.http.routers.pressograph-api.rule: "Host(`pressograph.infra4.dev`) && PathPrefix(`/api`)"
      traefik.http.routers.pressograph-api.tls: "true"
      traefik.http.routers.pressograph-api.tls.certresolver: "cloudflare"
      traefik.http.routers.pressograph-api.tls.options: "strict@file"
      traefik.http.routers.pressograph-api.middlewares: "api-gateway@file"
      traefik.http.routers.pressograph-api.priority: "100"

      # Service configuration
      traefik.http.services.pressograph-api.loadbalancer.server.port: "3001"
      traefik.http.services.pressograph-api.loadbalancer.server.scheme: "http"

      # Health check через Traefik
      traefik.http.services.pressograph-api.loadbalancer.healthcheck.path: "/health"
      traefik.http.services.pressograph-api.loadbalancer.healthcheck.interval: "30s"
      traefik.http.services.pressograph-api.loadbalancer.healthcheck.timeout: "5s"

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1"]
      <<: *healthcheck-defaults
      start_period: 45s

  # ═══════════════════════════════════════════════════════════════════
  # Frontend (Nginx with React SPA)
  # ═══════════════════════════════════════════════════════════════════
  frontend:
    build:
      context: ../../
      dockerfile: deploy/Containerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-/api}
        NODE_ENV: production
        BUILD_DATE: ${BUILD_DATE:-2025-10-29}
        VERSION: ${VERSION:-1.0.0}
    image: pressograph-frontend:${VERSION:-latest}
    container_name: pressograph-frontend
    restart: unless-stopped

    # Security context (Nginx user)
    user: "101:101"
    <<: *common-security
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID

    # Read-only filesystem (security hardening)
    read_only: true
    tmpfs:
      - /var/cache/nginx:mode=0755,size=50m
      - /var/run:mode=0755,size=10m
      - /tmp:mode=1777,size=50m

    # Resource limits (Nginx очень легковесный)
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

    # Logging
    logging: *common-logging

    # Dependencies
    depends_on:
      backend:
        condition: service_healthy

    # Networking
    networks:
      - traefik-public

    # Traefik Labels
    labels:
      # OCI Labels
      <<: *common-labels
      org.opencontainers.image.title: "Pressograph Frontend"
      org.opencontainers.image.description: "React SPA served by Nginx"
      com.pressograph.service: "frontend"

      # Traefik routing
      traefik.enable: "true"
      traefik.docker.network: "traefik-public"

      # HTTPS Router
      traefik.http.routers.pressograph.entrypoints: "https"
      traefik.http.routers.pressograph.rule: "Host(`pressograph.infra4.dev`)"
      traefik.http.routers.pressograph.tls: "true"
      traefik.http.routers.pressograph.tls.certresolver: "cloudflare"
      traefik.http.routers.pressograph.tls.options: "strict@file"

      # Apply web-standard middleware chain (security headers, compression, rate limiting)
      traefik.http.routers.pressograph.middlewares: "web-standard@file"
      traefik.http.routers.pressograph.priority: "1"

      # Service Configuration
      traefik.http.services.pressograph.loadbalancer.server.port: "80"
      traefik.http.services.pressograph.loadbalancer.server.scheme: "http"

      # Health check через Traefik
      traefik.http.services.pressograph.loadbalancer.healthcheck.path: "/health"
      traefik.http.services.pressograph.loadbalancer.healthcheck.interval: "30s"
      traefik.http.services.pressograph.loadbalancer.healthcheck.timeout: "3s"

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:80/health || exit 1"]
      <<: *healthcheck-defaults
      start_period: 15s

# ═══════════════════════════════════════════════════════════════════
# Volumes
# ═══════════════════════════════════════════════════════════════════
volumes:
  # PostgreSQL data (CRITICAL - backup required!)
  postgres_data:
    driver: local
    name: pressograph-postgres-data
    labels:
      com.pressograph.volume.type: "database"
      com.pressograph.volume.backup: "critical"
      com.pressograph.volume.backup.schedule: "daily"
      com.pressograph.volume.backup.retention: "30d"

  # Backend uploads (user-generated content)
  backend_uploads:
    driver: local
    name: pressograph-backend-uploads
    labels:
      com.pressograph.volume.type: "uploads"
      com.pressograph.volume.backup: "required"
      com.pressograph.volume.backup.schedule: "daily"
      com.pressograph.volume.backup.retention: "90d"

  # Backend logs (application logs)
  backend_logs:
    driver: local
    name: pressograph-backend-logs
    labels:
      com.pressograph.volume.type: "logs"
      com.pressograph.volume.backup: "optional"
      com.pressograph.volume.retention: "30d"

# ═══════════════════════════════════════════════════════════════════
# Networks
# ═══════════════════════════════════════════════════════════════════
networks:
  # Internal network for database (ISOLATED - no internet access)
  pressograph-internal:
    driver: bridge
    internal: true
    labels:
      com.pressograph.network.type: "internal"
      com.pressograph.network.environment: "production"
      com.pressograph.network.security: "isolated"
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1

  # External Traefik network (shared with all projects)
  traefik-public:
    external: true
    name: traefik-public

# ═══════════════════════════════════════════════════════════════════
# Production Notes
# ═══════════════════════════════════════════════════════════════════
#
# 1. Security Hardening:
#    ✅ All services run as non-root users
#    ✅ no-new-privileges on all containers
#    ✅ ALL capabilities dropped, only essential added
#    ✅ Frontend with read-only filesystem
#    ✅ Database isolated in internal network (no internet)
#    ✅ Secrets managed via .env.prod (gitignored)
#
# 2. Resource Management:
#    ✅ PostgreSQL: 1GB RAM, 1 CPU
#    ✅ Backend: 2GB RAM, 2 CPU (для production load)
#    ✅ Frontend: 256MB RAM, 0.5 CPU (Nginx легковесный)
#    ✅ Reservations гарантируют minimum QoS
#
# 3. Logging & Monitoring:
#    ✅ JSON logs с rotation (10MB × 5 files = 50MB max)
#    ✅ Compression enabled для экономии места
#    ✅ OCI labels для inventory management
#    ✅ Healthchecks с Traefik integration
#
# 4. High Availability:
#    ✅ restart: unless-stopped (auto-restart)
#    ✅ depends_on с restart: true (restart if dependency fails)
#    ✅ Healthchecks с proper start_period
#    ✅ Traefik healthchecks для load balancing
#
# 5. Backup Strategy:
#    ⚠️  postgres_data - CRITICAL (ежедневные бэкапы, хранение 30 дней)
#    ⚠️  backend_uploads - REQUIRED (ежедневные бэкапы, хранение 90 дней)
#    ℹ️  backend_logs - OPTIONAL (хранение 30 дней,ротация)
#
#    Команды для backup:
#    # Database dump
#    podman exec pressograph-db pg_dump -U pressograph pressograph > backup_$(date +%Y%m%d).sql
#
#    # Volume backup
#    podman run --rm -v pressograph-postgres-data:/data -v $(pwd):/backup alpine \
#      tar czf /backup/postgres_data_$(date +%Y%m%d).tar.gz -C /data .
#
# 6. Deployment Checklist:
#    □ .env.prod создан и заполнен (сильные пароли!)
#    □ Images собраны: make build-images
#    □ Traefik network создана: podman network create traefik-public
#    □ DNS records настроены (pressograph.infra4.dev → server IP)
#    □ Firewall rules настроены (если нужно)
#    □ Backup script настроен и протестирован
#    □ Monitoring настроен (опционально)
#
# 7. Maintenance:
#    # Update images
#    podman-compose -f compose.prod.yaml pull
#    podman-compose -f compose.prod.yaml up -d --force-recreate
#
#    # View logs
#    podman-compose -f compose.prod.yaml logs -f --tail 100
#
#    # Check health
#    curl https://pressograph.infra4.dev/api/health
#
#    # Database backup
#    podman exec pressograph-db pg_dump -U pressograph pressograph > backup.sql
#
# 8. Troubleshooting:
#    # Check container status
#    podman ps -a
#
#    # Check healthchecks
#    podman inspect pressograph-backend | grep -A 10 Health
#
#    # Check resource usage
#    podman stats --no-stream
#
#    # Check Traefik routing
#    curl -s https://tr-01.infra4.dev/api/http/routers | python3 -m json.tool
#
# ═══════════════════════════════════════════════════════════════════
