version: '3.8'

services:
  # ═══════════════════════════════════════════════
  # PostgreSQL Database
  # ═══════════════════════════════════════════════
  postgres:
    image: docker.io/library/postgres:18-trixie
    container_name: pressograph-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: pressograph
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: pressograph
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pressograph"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pressograph-internal

  # ═══════════════════════════════════════════════
  # Backend API (Node.js/Express)
  # ═══════════════════════════════════════════════
  backend:
    build:
      context: ../../server
      dockerfile: Dockerfile
    image: pressograph-backend:latest
    container_name: pressograph-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://pressograph:${POSTGRES_PASSWORD}@postgres:5432/pressograph
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      ALLOWED_ORIGINS: https://pressograph.infra4.dev
      BASE_URL: https://pressograph.infra4.dev
      MAX_FILE_SIZE: 10mb
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - pressograph-internal
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"

      # Backend API Router
      - "traefik.http.routers.pressograph-api.entrypoints=https"
      - "traefik.http.routers.pressograph-api.rule=Host(`pressograph.infra4.dev`) && PathPrefix(`/api`)"
      - "traefik.http.routers.pressograph-api.tls=true"
      - "traefik.http.routers.pressograph-api.tls.certresolver=cloudflare"
      - "traefik.http.routers.pressograph-api.middlewares=api-gateway@file"
      - "traefik.http.routers.pressograph-api.priority=100"
      - "traefik.http.services.pressograph-api.loadbalancer.server.port=3001"

  # ═══════════════════════════════════════════════
  # Frontend (Nginx with React SPA)
  # ═══════════════════════════════════════════════
  frontend:
    build:
      context: ../../
      dockerfile: deploy/Containerfile
      args:
        VITE_API_URL: /api
    image: pressograph-frontend:latest
    container_name: pressograph-frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - pressograph-internal
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-public"

      # HTTPS Router
      - "traefik.http.routers.pressograph.entrypoints=https"
      - "traefik.http.routers.pressograph.rule=Host(`pressograph.infra4.dev`)"
      - "traefik.http.routers.pressograph.tls=true"
      - "traefik.http.routers.pressograph.tls.certresolver=cloudflare"
      - "traefik.http.routers.pressograph.tls.options=strict@file"

      # Apply web-standard middleware chain (security headers, compression, rate limiting)
      - "traefik.http.routers.pressograph.middlewares=web-standard@file"

      # Service Configuration
      - "traefik.http.services.pressograph.loadbalancer.server.port=80"
      - "traefik.http.services.pressograph.loadbalancer.server.scheme=http"
      - "traefik.http.services.pressograph.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.pressograph.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.pressograph.loadbalancer.healthcheck.timeout=3s"

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  pressograph-internal:
    driver: bridge
  traefik-public:
    external: true
