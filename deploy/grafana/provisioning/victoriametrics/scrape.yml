# ═══════════════════════════════════════════════════════════════════
# VictoriaMetrics / vmagent Scrape Configuration
# ═══════════════════════════════════════════════════════════════════
# Prometheus-compatible scrape config для сбора метрик
#
# Targets:
# 1. Self-monitoring (VictoriaMetrics, vmagent)
# 2. Exporters (node-exporter, postgres-exporter)
# 3. Application (backend /metrics endpoint)
# 4. Traefik metrics (если доступен)
# 5. Docker service discovery (автоматическое обнаружение)
# ═══════════════════════════════════════════════════════════════════

global:
  scrape_interval: 15s      # Как часто собирать метрики
  scrape_timeout: 10s       # Timeout для scrape
  evaluation_interval: 15s  # Evaluation для rules (если есть)

  # External labels (добавляются ко всем метрикам)
  external_labels:
    cluster: 'pressograph'
    environment: 'development'
    region: 'local'

# ═══════════════════════════════════════════════════════════════════
# Scrape Configurations
# ═══════════════════════════════════════════════════════════════════

scrape_configs:
  # ─────────────────────────────────────────────────────────────────
  # VictoriaMetrics Self-Monitoring
  # ─────────────────────────────────────────────────────────────────
  - job_name: 'victoriametrics'
    static_configs:
      - targets: ['victoriametrics:8428']
        labels:
          service: 'victoriametrics'
          component: 'timeseries-db'

  # ─────────────────────────────────────────────────────────────────
  # vmagent Self-Monitoring
  # ─────────────────────────────────────────────────────────────────
  - job_name: 'vmagent'
    static_configs:
      - targets: ['vmagent:8429']
        labels:
          service: 'vmagent'
          component: 'metrics-collector'

  # ─────────────────────────────────────────────────────────────────
  # Node Exporter - Системные метрики хоста
  # ─────────────────────────────────────────────────────────────────
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
        labels:
          service: 'node-exporter'
          component: 'host-metrics'
          instance: 'pressograph-host'

  # ─────────────────────────────────────────────────────────────────
  # PostgreSQL Exporter - Метрики БД
  # ─────────────────────────────────────────────────────────────────
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']
        labels:
          service: 'postgres-exporter'
          component: 'database-metrics'
          database: 'pressograph'

  # ─────────────────────────────────────────────────────────────────
  # Pressograph Backend - Application Metrics
  # ─────────────────────────────────────────────────────────────────
  # ВАЖНО: Backend должен экспортировать /metrics endpoint!
  # См. примеры интеграции ниже
  - job_name: 'pressograph-backend'
    static_configs:
      - targets: ['pressograph-dev-backend:3001']
        labels:
          service: 'pressograph-backend'
          component: 'application'
          environment: 'development'
    # Health check endpoint (опционально)
    metrics_path: '/metrics'
    scrape_interval: 15s
    scrape_timeout: 10s

  # ─────────────────────────────────────────────────────────────────
  # Traefik Metrics (если включен metrics endpoint)
  # ─────────────────────────────────────────────────────────────────
  # ВАЖНО: Traefik должен быть настроен с metrics.prometheus
  # и доступен через traefik-public network
  #
  # В Traefik config добавьте:
  # [metrics]
  #   [metrics.prometheus]
  #     entryPoint = "metrics"
  #     addServicesLabels = true
  - job_name: 'traefik'
    static_configs:
      - targets: ['traefik:8082']  # Metrics port в Traefik
        labels:
          service: 'traefik'
          component: 'reverse-proxy'
    scrape_interval: 15s
    # Раскомментируйте если Traefik metrics не доступен:
    # honor_labels: true
    # relabel_configs:
    #   - source_labels: [__address__]
    #     target_label: __param_target
    #   - source_labels: [__param_target]
    #     target_label: instance
    #   - target_label: __address__
    #     replacement: traefik:8082

  # ─────────────────────────────────────────────────────────────────
  # Docker Service Discovery (автоматическое обнаружение контейнеров)
  # ─────────────────────────────────────────────────────────────────
  # Автоматически обнаруживает контейнеры с labels:
  #   prometheus.io/scrape: "true"
  #   prometheus.io/port: "PORT"
  #   prometheus.io/path: "/metrics" (опционально)
  - job_name: 'docker-service-discovery'
    docker_sd_configs:
      - host: unix:///var/run/docker.sock  # Podman socket
        refresh_interval: 30s
        filters:
          - name: label
            values: ['prometheus.io/scrape=true']

    # Relabel rules для Docker labels
    relabel_configs:
      # Только контейнеры с prometheus.io/scrape=true
      - source_labels: [__meta_docker_container_label_prometheus_io_scrape]
        action: keep
        regex: true

      # Port из label prometheus.io/port
      - source_labels: [__meta_docker_container_label_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+)
        replacement: $1

      # Path из label prometheus.io/path (default: /metrics)
      - source_labels: [__meta_docker_container_label_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
        replacement: $1

      # Container name -> instance label
      - source_labels: [__meta_docker_container_name]
        action: replace
        target_label: instance
        regex: /(.+)
        replacement: $1

      # Container service name (из Docker Compose)
      - source_labels: [__meta_docker_container_label_com_docker_compose_service]
        action: replace
        target_label: service

      # Container labels -> metric labels
      - action: labelmap
        regex: __meta_docker_container_label_com_pressograph_(.+)
        replacement: pressograph_$1

# ═══════════════════════════════════════════════════════════════════
# NOTES
# ═══════════════════════════════════════════════════════════════════
#
# 1. Backend Integration:
#    Backend должен экспортировать метрики на /metrics в Prometheus формате
#    Используйте библиотеку prom-client для Node.js
#
#    Пример для Node.js/Express:
#    ```javascript
#    const promClient = require('prom-client');
#    const register = new promClient.Registry();
#    promClient.collectDefaultMetrics({ register });
#
#    app.get('/metrics', async (req, res) => {
#      res.set('Content-Type', register.contentType);
#      res.end(await register.metrics());
#    });
#    ```
#
# 2. Traefik Metrics:
#    Включите в Traefik config:
#    ```toml
#    [metrics]
#      [metrics.prometheus]
#        entryPoint = "metrics"
#        addServicesLabels = true
#    ```
#
# 3. Docker Service Discovery:
#    Добавьте labels к любому контейнеру для автоматического scraping:
#    ```yaml
#    labels:
#      prometheus.io/scrape: "true"
#      prometheus.io/port: "8080"
#      prometheus.io/path: "/metrics"
#    ```
#
# 4. Custom Metrics:
#    Для добавления новых targets просто добавьте job в scrape_configs
#    Формат:
#    ```yaml
#    - job_name: 'my-service'
#      static_configs:
#        - targets: ['hostname:port']
#          labels:
#            service: 'my-service'
#    ```
#
# 5. Debugging:
#    Проверить targets в VictoriaMetrics UI:
#    https://victoria-dev.infra4.dev/targets
#
# ═══════════════════════════════════════════════════════════════════
