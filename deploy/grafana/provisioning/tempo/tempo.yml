# ═══════════════════════════════════════════════════════════════════
# Tempo Configuration для Distributed Tracing
# ═══════════════════════════════════════════════════════════════════
# Tempo хранит и query distributed traces
#
# Supported formats:
# - OTLP (OpenTelemetry Protocol) - рекомендуется
# - Jaeger
# - Zipkin
# ═══════════════════════════════════════════════════════════════════

# Server config
server:
  http_listen_port: 3200
  log_level: info

# Distributor (прием traces)
distributor:
  receivers:
    # OTLP receivers (OpenTelemetry)
    otlp:
      protocols:
        # gRPC (рекомендуется для production)
        grpc:
          endpoint: 0.0.0.0:4317
        # HTTP (удобно для development)
        http:
          endpoint: 0.0.0.0:4318

    # Jaeger receivers
    jaeger:
      protocols:
        thrift_http:
          endpoint: 0.0.0.0:14268
        grpc:
          endpoint: 0.0.0.0:14250

    # Zipkin receiver
    zipkin:
      endpoint: 0.0.0.0:9411

# Ingester (запись traces в storage)
ingester:
  trace_idle_period: 10s
  max_block_bytes: 1048576  # 1MB
  max_block_duration: 5m

# Compactor (сжатие и очистка старых traces)
compactor:
  compaction:
    block_retention: 7d  # 7 дней retention (из env variable)
    compacted_block_retention: 1h
    compaction_window: 1h
    max_compaction_objects: 1000000
    max_block_bytes: 104857600  # 100MB
    retention_concurrency: 10

# Storage (где хранить traces)
storage:
  trace:
    # Local filesystem storage (для single-node)
    backend: local
    local:
      path: /tmp/tempo/blocks
    # Write-Ahead Log (WAL)
    wal:
      path: /tmp/tempo/wal
    # Cache
    cache: none
    # Pool
    pool:
      max_workers: 100
      queue_depth: 10000

# Querier (query traces)
querier:
  frontend_worker:
    frontend_address: tempo:3200
  max_concurrent_queries: 20

# Query Frontend (кэширование queries)
query_frontend:
  search:
    max_duration: 0  # Unlimited search duration
  trace_by_id:
    query_shards: 50

# Metrics Generator (опционально - генерация метрик из traces)
# Для создания RED metrics (Rate, Errors, Duration)
metrics_generator:
  # Включить генерацию метрик
  registry:
    external_labels:
      source: tempo
      cluster: pressograph
  storage:
    path: /tmp/tempo/generator/wal
    remote_write:
      # Отправка метрик в VictoriaMetrics
      - url: http://victoriametrics:8428/api/v1/write
        send_exemplars: true

# Overrides (per-tenant limits)
overrides:
  defaults:
    # Ingestion limits
    ingestion_rate_strategy: local
    ingestion_rate_limit_bytes: 15728640  # 15MB/sec
    ingestion_burst_size_bytes: 20971520  # 20MB
    max_bytes_per_trace: 5242880  # 5MB per trace
    max_traces_per_user: 10000

    # Search limits
    max_search_bytes_per_trace: 0  # unlimited

# Usage report (отключить телеметрию)
usage_report:
  reporting_enabled: false

# ═══════════════════════════════════════════════════════════════════
# NOTES
# ═══════════════════════════════════════════════════════════════════
#
# 1. OTLP Endpoints (для Backend instrumentation):
#    - gRPC: tempo:4317 (рекомендуется)
#    - HTTP: tempo:4318
#
# 2. Backend Integration (Node.js + OpenTelemetry):
#    ```javascript
#    const { NodeSDK } = require('@opentelemetry/sdk-node');
#    const { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-grpc');
#    const { Resource } = require('@opentelemetry/resources');
#    const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');
#
#    const sdk = new NodeSDK({
#      resource: new Resource({
#        [SemanticResourceAttributes.SERVICE_NAME]: 'pressograph-backend',
#      }),
#      traceExporter: new OTLPTraceExporter({
#        url: 'http://tempo:4317',
#      }),
#    });
#
#    sdk.start();
#    ```
#
# 3. Retention:
#    - 7 дней по умолчанию (block_retention)
#    - Можно увеличить в .env.observability
#    - Traces занимают много места (~10KB per span)
#
# 4. Metrics Generator:
#    - Автоматически создает RED metrics из traces
#    - Rate: requests per second
#    - Errors: error rate
#    - Duration: latency percentiles
#    - Отправляет в VictoriaMetrics
#
# 5. Search:
#    - Поиск по TraceID в Grafana
#    - Поиск по tags (service.name, http.method, etc.)
#    - Корреляция с логами и метриками
#
# 6. Storage:
#    - Local filesystem для single-node
#    - Для production рассмотрите S3/GCS backend
#
# ═══════════════════════════════════════════════════════════════════
