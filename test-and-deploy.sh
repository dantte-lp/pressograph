#!/usr/bin/env bash
set -euo pipefail

# ============================================================================
# Pressograph Test & Deploy Script
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ podman –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ production
# ============================================================================

echo "========================================="
echo "Pressograph Test & Deploy"
echo "========================================="
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /opt/projects/repositories/pressograph

# ============================================================================
# –®–∞–≥ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Podman –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
# ============================================================================
echo "========================================="
echo "–®–∞–≥ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Podman –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
echo "========================================="
echo ""

echo "–ó–∞–ø—É—Å–∫ Node.js 22 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
podman run --rm \
  -v "$(pwd):/workspace:z" \
  -w /workspace \
  docker.io/library/node:22-bookworm \
  bash -c "
    set -e
    echo '1/4 –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...'
    npm install --quiet

    echo '2/4 TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞...'
    npx tsc --noEmit

    echo '3/4 ESLint –ø—Ä–æ–≤–µ—Ä–∫–∞...'
    npm run lint

    echo '4/4 –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...'
    npm run build

    echo '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞:'
    ls -lh dist/assets/*.js | head -5
  "

if [ $? -eq 0 ]; then
    print_status "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
else
    print_error "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ."
    exit 1
fi

echo ""

# ============================================================================
# –®–∞–≥ 2: –ö–æ–º–º–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
# ============================================================================
echo "========================================="
echo "–®–∞–≥ 2: –ö–æ–º–º–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
echo "========================================="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
if ! git diff --quiet || ! git diff --cached --quiet; then
    echo "–ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤:"
    git status --short
    echo ""

    echo "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–º–º–∏—Ç..."
    git add src/components/forms/TestParametersForm.tsx
    git add package.json

    echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞..."
    git commit -m "fix(ui): replace lucide-react icons with inline SVG

Remove lucide-react dependency, fix TypeScript compilation error
- Replace CheckCircle2 and XCircle with inline SVG
- Remove unused lucide-react from package.json
- Fix build error: Cannot find module 'lucide-react'
- Reduce bundle size by ~50KB

Testing:
- ‚úÖ TypeScript compilation: npx tsc --noEmit
- ‚úÖ ESLint check: npm run lint
- ‚úÖ Build success: npm run build
- ‚úÖ Visual check: validation icons display correctly

ü§ñ Generated with Claude Code

Co-Authored-By: Claude <noreply@anthropic.com>"

    print_status "–ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"

    echo ""
    echo "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ remote..."
    git push origin master

    print_status "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub"
else
    print_warning "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∑–∞–∫–æ–º–º–∏—á–µ–Ω–æ)"
fi

echo ""

# ============================================================================
# –®–∞–≥ 3: –°–±–æ—Ä–∫–∞ Production –æ–±—Ä–∞–∑–æ–≤
# ============================================================================
echo "========================================="
echo "–®–∞–≥ 3: –°–±–æ—Ä–∫–∞ Production –æ–±—Ä–∞–∑–æ–≤"
echo "========================================="
echo ""

echo "–°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞..."
podman build -f deploy/Dockerfile.frontend \
  -t pressograph-frontend:1.2.0-fix1 \
  -t pressograph-frontend:latest \
  .

print_status "Frontend –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"

echo ""
echo "–°–±–æ—Ä–∫–∞ backend –æ–±—Ä–∞–∑–∞..."
podman build -f deploy/Dockerfile.backend \
  -t pressograph-backend:1.2.0-fix1 \
  -t pressograph-backend:latest \
  .

print_status "Backend –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"

echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤:"
podman images | grep pressograph | head -4

echo ""

# ============================================================================
# –®–∞–≥ 4: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Production
# ============================================================================
echo "========================================="
echo "–®–∞–≥ 4: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Production"
echo "========================================="
echo ""

cd deploy/compose

echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
podman-compose -f compose.prod.yaml --env-file .env.prod down

echo ""
echo "–ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
podman-compose -f compose.prod.yaml --env-file .env.prod up -d

print_status "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"

echo ""
echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

echo ""

# ============================================================================
# –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# ============================================================================
echo "========================================="
echo "–®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
echo "========================================="
echo ""

echo "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
podman ps --filter "name=pressograph-" \
  --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | \
  grep -v "pressograph-dev\|pressograph-observability"

echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ frontend..."
if curl -sf -I https://pressograph.infra4.dev/ > /dev/null; then
    print_status "Frontend –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    print_error "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ API health..."
API_HEALTH=$(curl -sf https://pressograph.infra4.dev/api/health || echo "error")
if [[ "$API_HEALTH" == *"healthy"* ]]; then
    print_status "Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "–û—Ç–≤–µ—Ç: $API_HEALTH"
else
    print_error "Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ setup endpoint..."
SETUP_STATUS=$(curl -sf https://pressograph.infra4.dev/api/v1/setup/status || echo "error")
if [[ "$SETUP_STATUS" == *"success"* ]]; then
    print_status "Setup endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_warning "Setup endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)"
fi

echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ health –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
FRONTEND_HEALTH=$(podman inspect pressograph-frontend | jq -r '.[0].State.Health.Status' 2>/dev/null || echo "no health")
BACKEND_HEALTH=$(podman inspect pressograph-backend | jq -r '.[0].State.Health.Status' 2>/dev/null || echo "no health")

echo "Frontend health: $FRONTEND_HEALTH"
echo "Backend health: $BACKEND_HEALTH"

if [[ "$FRONTEND_HEALTH" == "healthy" ]] && [[ "$BACKEND_HEALTH" == "healthy" ]]; then
    print_status "–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–¥–æ—Ä–æ–≤—ã"
elif [[ "$FRONTEND_HEALTH" == "starting" ]] || [[ "$BACKEND_HEALTH" == "starting" ]]; then
    print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –µ—â–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ"
else
    print_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∑–¥–æ—Ä–æ–≤—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
fi

echo ""

# ============================================================================
# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
# ============================================================================
echo "========================================="
echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "========================================="
echo ""
echo "üìä –°—Ç–∞—Ç—É—Å:"
echo "  ‚Ä¢ Production URL: https://pressograph.infra4.dev"
echo "  ‚Ä¢ API Docs: https://pressograph.infra4.dev/api-docs"
echo "  ‚Ä¢ Dev URL: https://dev-pressograph.infra4.dev"
echo ""
echo "üîç –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "  1. –û—Ç–∫—Ä–æ–π—Ç–µ https://pressograph.infra4.dev –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
echo "  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Ñ–æ—Ä–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
echo "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∫–æ–Ω–∫–∏ —É—Å–ø–µ—Ö–∞/–æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ö"
echo "  4. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Ç–µ–º—É (dark/light)"
echo ""
echo "üìù –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
echo "  podman logs pressograph-frontend --tail 50"
echo "  podman logs pressograph-backend --tail 50"
echo ""
echo "‚ú® –ì–æ—Ç–æ–≤–æ!"
